//! # Automatically Generate Structs From Metadata Schema
//!
//! This build script is run before every build.  It generates Rust
//! type definitions from the JSON Schema
//! at `metadata/metadata.schema.json`. The generated code is written
//! to `src/corpus/metadata_structs.rs`.
//!
//! ## How It Works
//!
//! 1. Reads the JSON Schema from `metadata/metadata.schema.json`.
//! 2. Parses it into a `schemars::schema::RootSchema`.
//! 3. Uses [`typify`] with [`TypeSpace`] to generate Rust types, enabling
//!    the `struct_builder` option for builder-pattern struct construction.
//! 4. Formats the generated Rust code using [`prettyplease`].
//! 5. Writes the result to `src/corpus/metadata_structs.rs`.

use std::{fs, path::Path};

use typify::{TypeSpace, TypeSpaceSettings};

fn main() {
    let schema_text = std::fs::read_to_string("metadata/metadata.schema.json").unwrap();
    let schema = serde_json::from_str::<schemars::schema::RootSchema>(&schema_text).unwrap();

    let mut type_space = TypeSpace::new(TypeSpaceSettings::default().with_struct_builder(true));
    type_space.add_root_schema(schema).unwrap();

    // Generate the structs and documentation from metadata_schema.rs.
    let rust_code =
        prettyplease::unparse(&syn::parse2::<syn::File>(type_space.to_stream()).unwrap());
    let documentation = r#"// # Automatically Generated Metadata Schema. Do not edit.
//
// This file is automatically generated by build.rs from metadata.schema.json.

#![allow(unused)]
"#;
    let rust_file_contents = format!("{}{}", documentation, rust_code);

    // Write file contents to metadata_schema.rs.
    let mut out_file = Path::new("src/corpus").to_path_buf();
    out_file.push("metadata_structs.rs");
    fs::write(out_file, rust_file_contents).unwrap();
}
